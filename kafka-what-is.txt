3:I[9261,[],""]
5:I[6675,[],""]
6:I[1441,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","918","static/chunks/918-55e4a914e8809569.js","462","static/chunks/462-12ae486a1be74331.js","423","static/chunks/423-1777a1736af94f26.js","185","static/chunks/app/layout-ae468821186f76f4.js"],""]
7:I[8390,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","918","static/chunks/918-55e4a914e8809569.js","462","static/chunks/462-12ae486a1be74331.js","423","static/chunks/423-1777a1736af94f26.js","185","static/chunks/app/layout-ae468821186f76f4.js"],"ThemeProvider"]
8:I[7083,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","918","static/chunks/918-55e4a914e8809569.js","462","static/chunks/462-12ae486a1be74331.js","423","static/chunks/423-1777a1736af94f26.js","185","static/chunks/app/layout-ae468821186f76f4.js"],"Header"]
9:I[9605,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","206","static/chunks/app/(blog)/%5Bslug%5D/page-55e21886c07a752a.js"],""]
a:I[3760,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","918","static/chunks/918-55e4a914e8809569.js","462","static/chunks/462-12ae486a1be74331.js","423","static/chunks/423-1777a1736af94f26.js","185","static/chunks/app/layout-ae468821186f76f4.js"],"Toaster"]
b:I[4743,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","918","static/chunks/918-55e4a914e8809569.js","462","static/chunks/462-12ae486a1be74331.js","423","static/chunks/423-1777a1736af94f26.js","185","static/chunks/app/layout-ae468821186f76f4.js"],"GoogleTagManager"]
4:["slug","kafka-what-is","d"]
0:["qGSDEiurmeK7XNQ8nRN4G",[[["",{"children":["(blog)",{"children":[["slug","kafka-what-is","d"],{"children":["__PAGE__?{\"slug\":\"kafka-what-is\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["(blog)",{"children":[["slug","kafka-what-is","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","(blog)","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"ko","className":"h-full scroll-smooth","suppressHydrationWarning":true,"children":[["$","head",null,{"children":["$","$L6",null,{"id":"adsbygoogle-init","strategy":"beforeInteractive","src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1154659137489563","crossOrigin":"anonymous"}]}],["$","body",null,{"className":"flex min-h-screen flex-col font-pretendard","children":[["$","$L7",null,{"children":[["$","$L8",null,{}],["$","main",null,{"className":"mt-[calc(64px+env(safe-area-inset-top))] flex flex-1 flex-col","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"className":"grid flex-1 place-content-center text-center","children":[["$","h1",null,{"className":"mb-4 text-2xl font-bold","children":"Not Found"}],["$","p",null,{"className":"mb-8 text-lg","children":"찾을 수 없는 페이지입니다."}],["$","$L9",null,{"href":"/","children":"홈으로","className":"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 py-2 mx-auto w-fit px-10"}]]}],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"className":"mb-16 mt-20 flex flex-col items-center justify-center gap-4 text-center print:hidden","children":[["$","div",null,{"className":"flex justify-center gap-4","children":[["$","$L9",null,{"href":"https://github.com/","target":"_blank","children":["$","svg",null,{"fill":"currentColor","viewBox":"0 0 16 16","height":30,"width":30,"className":"fill-foreground transition hover:fill-pink-600","children":["$","path",null,{"d":"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0016 8c0-4.42-3.58-8-8-8z"}]}]}],["$","$L9",null,{"href":"https://www.linkedin.com/in/","target":"_blank","children":["$","svg",null,{"viewBox":"0 0 24 24","fill":"currentColor","height":30,"width":30,"className":"fill-foreground transition hover:fill-pink-600","children":["$","path",null,{"d":"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"}]}]}]]}],["$","div",null,{"children":["© 2024. ",["$","span",null,{"className":"font-semibold","children":"Devtimes Blog"}]," all rights reserved."]}]]}]]}],["$","$La",null,{}],["$","$Lb",null,{"gtmId":"GTM-N7LWQNXW"}]]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/81c2358a4e4f0309.css","precedence":"next","crossOrigin":""}]],"$Lc"]]]]
d:I[2465,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","206","static/chunks/app/(blog)/%5Bslug%5D/page-55e21886c07a752a.js"],""]
f:I[3574,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","206","static/chunks/app/(blog)/%5Bslug%5D/page-55e21886c07a752a.js"],""]
10:I[938,["605","static/chunks/605-9393b79bc12886be.js","734","static/chunks/734-fab1a4b8e5b2b407.js","206","static/chunks/app/(blog)/%5Bslug%5D/page-55e21886c07a752a.js"],""]
2:["$","div",null,{"className":"prose mx-auto w-full max-w-[750px] px-5 dark:prose-invert sm:px-6","children":[["$","header",null,{"className":"mt-14 text-center","children":[["$","h1",null,{"className":"mb-5 text-3xl","children":"카프카(Kafka)의 이해"}],["$","div",null,{"className":"mb-3 text-base","children":["$","$L9",null,{"href":"/datalake","className":"font-semibold text-pink-600 no-underline underline-offset-4 hover:underline","children":"Datalake"}]}],["$","div",null,{"className":"flex justify-center gap-3 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"className":"flex items-center gap-1","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar-days w-3.5","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],["$","path","6423bh",{"d":"M8 14h.01"}],["$","path","1etili",{"d":"M12 14h.01"}],["$","path","1gbofw",{"d":"M16 14h.01"}],["$","path","lrp35t",{"d":"M8 18h.01"}],["$","path","mhygvu",{"d":"M12 18h.01"}],["$","path","kzsmim",{"d":"M16 18h.01"}],"$undefined"]}],["$","span",null,{"children":"2019년 01월 18일"}]]}],["$","div",null,{"className":"flex items-center gap-1","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-clock3 w-3.5","children":[["$","circle","1mglay",{"cx":"12","cy":"12","r":"10"}],["$","polyline","1aq6pp",{"points":"12 6 12 12 16.5 12"}],"$undefined"]}],["$","span",null,{"children":[12,"분"]}]]}]]}],["$","hr",null,{"className":"mt-5"}]]}],["$","nav",null,{"className":"xl:hidden","children":[["$","h2",null,{"id":"table-of-contents-top","children":"On this page"}],["$","ul",null,{"children":[["$","li","#메시지큐",{"className":"ml-4 my-0 py-1","children":["$","$L9",null,{"href":"#메시지큐","className":"underline-offset-4 hover:text-pink-600","children":" 메시지큐?"}]}],["$","li","#카프카란",{"className":"ml-4 my-0 py-1","children":["$","$L9",null,{"href":"#카프카란","className":"underline-offset-4 hover:text-pink-600","children":" 카프카란?"}]}]]}],["$","hr",null,{}]]}],["$","article",null,{"className":"relative","children":[["$","$Ld",null,{"toc":[{"text":" 메시지큐?","link":"#메시지큐","indent":1},{"text":" 카프카란?","link":"#카프카란","indent":1}]}],"$Le"]}],["$","hr",null,{}],["$","$Lf",null,{}],["$","$L10",null,{}]]}]
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, viewport-fit=cover"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"카프카(Kafka)의 이해 | DevTimes Blog"}],["$","meta","3",{"name":"description","content":"카프카(Kafka)의 이해"}],["$","meta","4",{"property":"og:title","content":"카프카(Kafka)의 이해 | DevTimes Blog"}],["$","meta","5",{"property":"og:description","content":"카프카(Kafka)의 이해"}],["$","meta","6",{"property":"og:url","content":"https://blog.devtimes.com/kafka-what-is"}],["$","meta","7",{"property":"og:image","content":"https://blog.devtimes.com/posts/datalake/kafka-what-is/cover.png"}],["$","meta","8",{"property":"og:type","content":"article"}],["$","meta","9",{"property":"article:published_time","content":"2019-01-18T00:00:00.000Z"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"카프카(Kafka)의 이해 | DevTimes Blog"}],["$","meta","12",{"name":"twitter:description","content":"카프카(Kafka)의 이해"}],["$","meta","13",{"name":"twitter:image","content":"https://blog.devtimes.com/posts/datalake/kafka-what-is/cover.png"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"518x518"}],["$","link","15",{"rel":"icon","href":"/icon.png?8d4a794a4e2a4e0b","type":"image/png","sizes":"518x518"}],["$","link","16",{"rel":"apple-touch-icon","href":"/apple-icon.png?8d4a794a4e2a4e0b","type":"image/png","sizes":"518x518"}]]
1:null
e:[["$","p",null,{"children":"대용량 게임로그 수집을 위해 Elastic Stack을 도입하게 되었는데, 중간에 버퍼역할(메시지큐)을 하는 Kafka에 대서 알아보려고 한다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-1.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","h3",null,{"id":"메시지큐","children":"메시지큐?"}],"\n",["$","p",null,{"children":"메시지 지향 미들웨어(Message Oriented Middleware: MOM)은 비동기 메시지를 사용하는 다른 응용프로그램 사이의 데이터 송수신을 의미하는데 MOM을 구현한 시스템을 메시지큐(Message Queue:MQ)라 한다."}],"\n",["$","h3",null,{"id":"카프카란","children":"카프카란?"}],"\n",["$","p",null,{"children":"분산형 스트리밍 플랫폼(A distributed streaming platform)이다. LinkedIn에서 여러 구직 및 채용 정보들을 한곳에서 처리(발행/구독)할 수 있는 플래폼으로 개발이 시작 되었다고 한다."}],"\n",["$","p",null,{"children":"(발행/구독: pub-sub은 메시지를 특정 수신자에게 직접적으로 보내주는 시스템이 아니고, 메시지를 받기를 원하는 사람이 해당 토픽(topic)을 구독함으로써 메시지를 읽어 올 수 있다.)"}],"\n",["$","h4",null,{"id":"카프카의-특징","children":"카프카의 특징"}],"\n",["$","p",null,{"children":"대용량 실시간 로그처리에 특화되어 설계된 메시징 시스템으로 TPS가 매우 우수하고,"}],"\n",["$","p",null,{"children":"메시지를 메모리에 저장하는 기존 메시징 시스템과는 달리 파일에 저장을 하는데 그로 인해 카프카를 재시작해도 메시지 유실 우려가 감소된다."}],"\n",["$","p",null,{"children":"기본 메시징 시스템(rabbitMQ, ActiveMQ)에서는 브로커(Broker)가 컨슈머(consumer)에게 메시지를 push해 주는 방식인데, 카프카는 컨슈머(Consumer)가 브로커(Broker)로부터 메시지를 직접 가져가는 PULL 방식으로 동작하기 때문에 컨슈머는 자신의 처리 능력만큼의 메시지만 가져와 최적의 성능을 낼 수 있다. 대용량처리에 특화 되었다는 것은 아마도 이러한 구조로 설계가 되어 가능하게 된게 아닌가 싶다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-2.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"여기서 한가지 의문이 든다. 일반적으로 파일보다 메모리가 성능이 우수한데 왜 카프카가 성능이 좋은 것일까? 그 이유는 카프카의 파일 시스템을 활용한 고성능 디자인에 있다. 일반적으로 하드디스크는 메모리보다 수백배 느리지만 하드디스크의 순차적 읽기에 대한 성능은 메모리보다 크게 떨어지지 않는다고 한다."}],"\n",["$","p",null,{"children":"컨슈머(Consumer)와 브로커(Broker)에 대해서는 카프카 구성요소에 대한 설명에서 좀 더 자세히 알아보자."}],"\n",["$","h4",null,{"id":"카프카의-구성요소","children":"카프카의 구성요소"}],"\n",["$","p",null,{"children":"카프카에는 다음과 같이 여러 구성요소가 있다."}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"topic, partition, offset"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"producer, consumer, consumer group"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"broker, zookeeper"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"replication"}]}],"\n",["$","p",null,{"children":"구성요소 하나씩 살펴보도록 하자."}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Topic, Partition"}]," : 카프카에 저장되는 메시지는 topic으로 분류되고, topic은 여러개의 patition으로 나눠질수 있다. partition안에는 message의 상대적 위치를 내타내는 offset이 있는데 이 offet정보를 이용해 이전에 가져간 메시지의 위치 정보를 알 수 있고 동시에 들어오는 많은 데이터를 여러개의 파티션에 나누어 저장하기 때문에 병렬로 빠르게 처리할 수 있다."]}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-3.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Producer, Consumer"}]," : 말대로 Producer는 생산(메시지를 Write)하는 주체, Consumer는 소비(메시지를 Read)하는 주체이다. Producer와 Consumer간에는 상호 존재 여부를 알지 못한채 자신에게 주어진 역할만 처리 하게 된다. (위 그림에서 보면 Writes가 Producer)"]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Consumer Group"}]," : Producer에서 생산(Write)한 메시지는 여러개의 파티션에 저장을 하는데, 그렇다면 소비하는(Consumer)하는 쪽에서도 여러 소비자가 메시지를 읽어가는것이 훨씬 효율적일 것이다. 하나의 목표를 위해 소비를 하는 그룹, 즉 하나의 토픽을 읽어가기 위한 Counsumer들을 Consumer Group라고 한다."]}],"\n",["$","p",null,{"children":"하지만 이 Consumer Group에는 한가지 룰이 있다. Topic의 파티션은 그 Consumer Group과 1:n 매칭. 즉, 자신이 읽고 있는 파티션에는 같은 그룹내 다른 컨슈머가 읽을 수 없다. (파티션에는 동일한 Consumer Group을 위한 하나의 구멍이 있고, Consumer는 그 구멍에 빨대를 꽂아 읽어간다고 생각하면 쉽게 상상이 될지도….^^;)"}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-4.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"위 그림과 같이 하나의 토픽에 4개의 파티션이 있고 컨슈머그룹내 3개의 컨슈머가 있다면 컨슈머1,2,3은 각 파티션 1,2,3에 순차적으로 배치가 될 것이고, offset정보를 이용해 순차적으로 데이터를 읽게 된다. 문제는 파티션4인데 컨슈머 갯수가 파티션 갯수보다 작다면 컨슈머 1,2,3중 하나가 파티션4에 접근하여 데이터를 읽게 된다. 만약 파티션 갯수와 컨슈머 갯수가 동일하개 4개씩이라면 각 컨슈머들은 하나의 파티션에서 데이터를 읽게 될것 이고, 파티션갯수가 4개고 컨슈머 갯수가 5개이면 컨슈머5는 그냥 아무일도 안하게 된다.(일반적으로 파티션 갯수와 컨슈머 갯수는 동일하게 구성하는 것을 추천한다고 함.)"}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-5.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"컨슈머그룹이 존재하는 또 다른 이유가 있다. 물론 이러한 구조로 데이터를 병렬로 읽게 되어 빠른처리가 가능하다는 부분도 있겠지만, 특정 컨슈머에 문제가 생겼을 경우 다른 그룹내 컨슈머가 대신 읽을 수 있게 리벨런싱이 되어 장애 상황에서도 문제 없이 대처할 수 있게 된다."}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Broker, Zookeeper"}]," : broker는 카프카 서버를 칭한다. 동일한 노드내에서 여러개의 broker서버를 띄울 수 있고, Zookeeper는 이러한 분산 메시지큐의 정보를 관리해주는 역할을 한다. 카프카를 띄우기 위해서는 반드시 주키퍼가 실행되어야 한다."]}],"\n",["$","p",null,{"children":[["$","strong",null,{"children":"Replication"}]," : 카프카에서는 replication 수를 임의로 지정하여 topic를 만들 수 있다. replication-factor에 지정하는데 만약 3으로 하면 replication 수가 3이 된다."]}],"\n",["$","p",null,{"children":"Kafka Cluster에 3개의 broker가 있고 3개의 Topic이 있다고 가정해보자."}],"\n",["$","p",null,{"children":"Topic-1은 replication-factor 1, Topic-2은 replication-factor 2, Topic-3은 replication-factor 3인 경우이다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-6.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"그렇다면 replication은 왜 필요할까? 단지 데이터의 복제 용도라기 보다는 특정 borker에 문제가 생겼을 경우 해당 broker의 역할을 다른 broker에서 즉각적으로 대신 수행 할 수 있게 하기 위한 용도 일 것이다."}],"\n",["$","h4",null,{"id":"replication---leader--follower","children":"Replication - leader & follower"}],"\n",["$","p",null,{"children":"replication을 좀더 자세히 들여다보면, 복제요소중 대표인 leader, 그외 요소인 follower로 나누어진다. topic으로 통하는 모든 데이터의 read/write는 오직 leader에서 이루어지고 follower는 leader와 sync를 유지함으로써 leader에 문제가 생겼을 경우 follower들 중 하나가 leader역할을 하게 되는 것이다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-7.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"만약 카프카 클러스터내 broker 2에서 장애가 발생되었다면, broker 2에 있던 Topic-2(leader)의 역할을 대신 수행하기 위해 아래 그림과 같이 broker 1에 있는 Topic(follower)가 leader역할을 하게 될 것이다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-8.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"복제된 데이터가 follower들에게 있으니, 메시지의 유실이 없다는 장점이 있지만, 복제를 하기 위한 시간과 네트워크 비용이 들기 때문에 데이터의 중요도에 따라 ack옵션으로 성능과 데이터의 중요도에 따라 다음과 같이 세부설정이 가능하다."}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"ack (default:1)"}]}],"\n",["$","div",null,{"className":"my-6 flex items-center gap-3 rounded-md px-5 py-4 text-secondary-foreground bg-secondary","children":[false,["$","div",null,{"className":"callout-contents flex-1","children":["$undefined",["\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"0 : 프로듀서는 서버로부터 어떠한 ack도 기다리지 않음. 유실율 높으나 높은 처리량"}],"\n",["$","li",null,{"children":"1 : 리더는 데이터를 기록, 모든 팔로워는 확인하지 않음"}],"\n",["$","li",null,{"children":"-1(또는 all) : 모든 ISR 확인. 무손실"}],"\n"]}],"\n"]]}]]}],"\n",["$","p",null,{"children":"ack값을 설정하여 데이터의 무손실에 더 중요성을 둘 것인지 또는 유실을 어느정도 감수 하더라고 속도에 중요성을 둘 것인지를 셋팅할 수 있다."}],"\n",["$","p",null,{"children":"지금까지 설명한 모든 구성요소를 그림으로 표현하면 아래 그림과 같다."}],"\n",["$","p",null,{"children":[["$","img",null,{"src":"/posts/datalake/kafka-what-is/kafka-9.png","alt":"img","className":"mx-auto mb-0 mt-8 rounded-md"}],["$","span",null,{"className":"mb-8 mt-2 block w-full text-center text-sm text-gray-500 dark:text-gray-400","children":"img"}]]}],"\n",["$","p",null,{"children":"Producer에서는 메시지를 입력하고, Consumer에서 메시지를 읽어갈때 Zookeeper에서 broker 및 offset정보를 관리하기 때문에 분산처리가 가능하게 된다."}],"\n",["$","p",null,{"children":"카프카를 운영하기에 앞서 기본적인 구성요소나 매커니즘에 대해 충분히 이해를 하면 운영 하는데 많은 도움이 될 것이다."}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"참고자료"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["공식홈 문서 : (",["$","a",null,{"target":"_blank","href":"http://kafka.apache.org/documentation/","className":"break-words text-pink-600 no-underline underline-offset-4 hover:underline","children":"http://kafka.apache.org/documentation/"}],")"]}],"\n"]}]]
